import asyncio
import json
import os
import re
import requests
import logging
import time
from bs4 import BeautifulSoup
from packaging.version import Version
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, User
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

from config import URL, TELEGRAM_TOKEN, PRODUCT_BUTTONS, POM_MODULES, POM_BUILD_MODULES, UNIFIED_POM_URLS, MODULES_LIST, \
    RELEASES_JSON_PATH, SUBSCRIPTIONS_JSON_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOG_FILE_PATH = os.path.join(BASE_DIR, "bot.log")
logging.basicConfig(
    filename=LOG_FILE_PATH,
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    encoding='utf-8'
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_ACTION, SELECT_MODULE, INPUT_VERSION, INPUT_DESCRIPTION, CHOOSE_VERSION_TYPE = range(5)

def get_user_info(user: User) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @username –ò–º—è –§–∞–º–∏–ª–∏—è (id123)"""
    parts = []
    if user.username:
        parts.append(f"@{user.username}")
    if user.full_name.strip():
        parts.append(user.full_name)
    if not parts:  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
        parts.append(f"id{user.id}")
    return " ".join(parts)

def load_releases() -> list:
    try:
        with open(RELEASES_JSON_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def save_releases(data: list) -> None:
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    unique_modules = {}
    for item in data:
        module = item["module"]
        unique_modules[module] = item  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    with open(RELEASES_JSON_PATH, "w", encoding="utf-8") as f:
        json.dump(list(unique_modules.values()), f, ensure_ascii=False, indent=2)


def load_subscriptions() -> dict:
    try:
        with open(SUBSCRIPTIONS_JSON_PATH, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"users": []}


def save_subscriptions(data: dict) -> None:
    with open(SUBSCRIPTIONS_JSON_PATH, "w") as f:
        json.dump(data, f, indent=2)


async def toggle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    subs = load_subscriptions()

    if user_id in subs["users"]:
        subs["users"].remove(user_id)
        text = "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
    else:
        subs["users"].append(user_id)
        text = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"

    save_subscriptions(subs)
    await update.message.reply_text(text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    subs = load_subscriptions()
    user_id = update.effective_user.id
    sub_button = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if user_id in subs["users"] else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"

    keyboard = [
        ["–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–∏–∑ –º–æ–¥—É–ª—è", "–ü–æ–ª—É—á–∏—Ç—å"],
        [sub_button]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CHOOSE_ACTION


async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–ü–æ–ª—É—á–∏—Ç—å":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=FIRST_KEYBOARD)
        return ConversationHandler.END
    elif text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–∏–∑ –º–æ–¥—É–ª—è":
        modules_keyboard = [MODULES_LIST[i:i + 3] for i in range(0, len(MODULES_LIST), 3)]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
            reply_markup=ReplyKeyboardMarkup(modules_keyboard, resize_keyboard=True)
        )
        return SELECT_MODULE
    else:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É ConversationHandler
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥


async def select_module(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    module = update.message.text
    if module not in MODULES_LIST:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –º–æ–¥—É–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return SELECT_MODULE

    context.user_data["module"] = module
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –º–æ–¥—É–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.Y.Z (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.18.3):\n"
        "‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Ä—Å–∏—è –ø—Ä–æ—à–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!"
    )
    return INPUT_VERSION


async def input_version(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    version = update.message.text.strip()
    if not re.match(r"^\d+(\.\d+){1,3}$", version):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return INPUT_VERSION

    context.user_data["version"] = version
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    return INPUT_DESCRIPTION


async def notify_subscribers(bot, data: dict) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["module", "version", "timestamp", "user"]
        for field in required_fields:
            if field not in data:
                raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üöÄ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ –º–æ–¥—É–ª—è {data['module']}!\n"
            f"üîñ –í–µ—Ä—Å–∏—è: {data['version']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {data['timestamp']}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {data['user']}\n"
        )
        if data.get("description"):
            message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        subs = load_subscriptions()
        for user_id in subs["users"]:
            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="Markdown"
            )

    except KeyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")


async def input_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        description = update.message.text
        context.user_data["description"] = description
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data["timestamp"] = (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')
        context.user_data["user"] = get_user_info(update.effective_user)  # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
        logging.info(f"–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context.user_data}")
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        releases = load_releases()
        module_name = context.user_data["module"]

        # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        existing_entry = next((item for item in releases if item["module"] == module_name), None)

        if existing_entry:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            existing_entry.update({
                "version": context.user_data["version"],
                "description": description,
                "timestamp": (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S'),
                "user": get_user_info(update.effective_user)
            })
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            releases.append({
                "module": module_name,
                "version": context.user_data["version"],
                "description": description,
                "timestamp": (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S'),
                "user": get_user_info(update.effective_user)
            })

        save_releases(releases)

        # –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        asyncio.create_task(notify_subscribers(context.bot, context.user_data))

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        subs = load_subscriptions()
        user_id = update.effective_user.id
        sub_button = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if user_id in subs["users"] else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
        keyboard = [
            ["–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–∏–∑ –º–æ–¥—É–ª—è", "–ü–æ–ª—É—á–∏—Ç—å"],
            [sub_button]
        ]
        await update.message.reply_text(
            f"‚úÖ –í–µ—Ä—Å–∏—è {context.user_data['version']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        context.user_data.clear()
        return ConversationHandler.END
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

def build_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    subs = load_subscriptions()
    sub_button = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if user_id in subs["users"] else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
    return ReplyKeyboardMarkup(
        [
            ["–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–∏–∑", "–ü–æ–ª—É—á–∏—Ç—å"],
            [sub_button]
        ],
        resize_keyboard=True
    )

# 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /skip
async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["description"] = ""  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    return await input_description(update, context)


def get_pom_url(module: str, build: bool = False) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –º–æ–¥—É–ª—è.
    –°—Å—ã–ª–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ —Å–±–æ—Ä–æ—á–Ω–æ–≥–æ pom –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ.
    –ï—Å–ª–∏ build=True –∏ –∏–º—è –º–æ–¥—É–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "engdb.", —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ URL.
    """
    if build:
        if module.startswith("engdb."):
            base = module[len("engdb."):]
            return UNIFIED_POM_URLS.get(base)
        else:
            return UNIFIED_POM_URLS.get(module)
    else:
        return UNIFIED_POM_URLS.get(module)


def build_keyboard(items: list[str], cols: int = 3) -> ReplyKeyboardMarkup:
    rows = [items[i:i + cols] for i in range(0, len(items), cols)]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


FIRST_KEYBOARD = build_keyboard(list(PRODUCT_BUTTONS.keys()), cols=3)


def parse_index(url: str) -> dict[str, list[Version]]:
    response = requests.get(url)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, "html.parser")
    versions = {}
    for link in soup.select("ul li a[href$='.tar.gz']"):
        href = link.get('href')
        match = re.match(r"^(.+)-(\d+(?:\.\d+)*)\.tar\.gz$", href)
        if match:
            name, ver = match.groups()
            versions.setdefault(name, []).append(Version(ver))
    return {name: sorted(vs) for name, vs in versions.items()}


def parse_pom_version(url: str) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç –≤–µ—Ä—Å–∏—é –∏–∑ XML (maven-metadata.xml) —á–µ—Ä–µ–∑ lxml.
    –ü—Ä–∏–º–µ—Ä URL: https://mvn.cstechnology.ru/releases/ru/cs/engbe/maven-metadata.xml
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XML-URL
    xml_url = url.replace("#/", "").rstrip("/") + "/maven-metadata.xml"

    try:
        response = requests.get(xml_url)
        response.raise_for_status()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º lxml –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ XML
        soup = BeautifulSoup(response.text, "lxml-xml")  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        release_tag = soup.find("release")

        if release_tag and release_tag.text.strip():
            return release_tag.text.strip()

        raise ValueError(f"–¢–µ–≥ <release> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {xml_url}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {xml_url}: {str(e)}")
        raise


async def old_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()
    user = update.effective_user
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ /start")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=FIRST_KEYBOARD)


async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.strip()
    user_data = context.user_data
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {text}")

    if 'pending_pom' in user_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–µ—Ä—Å–∏–π
        if text == "–ü—Ä–æ—à–µ–¥—à–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            await send_pom_version(update, user_data['pending_pom']['product'],
                                   user_data['pending_pom']['combination'], True, context)
        elif text == "–ù–æ–≤–µ–π—à–∏–µ":
            await send_pom_version(update, user_data['pending_pom']['product'],
                                   user_data['pending_pom']['combination'], False, context)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        del user_data['pending_pom']
        return

    if 'product' not in user_data:
        if text in PRODUCT_BUTTONS:
            print(text)
            user_data['product'] = text
            second_keyboard = build_keyboard(list(PRODUCT_BUTTONS[text].keys()), cols=3)
            await update.message.reply_text(f"{text}: –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥—É:", reply_markup=second_keyboard)
    else:
        print(text + " 222")
        product = user_data.pop('product')
        combination = f"{product} {text}"
        if text in ["DEV", "STAND", "POM"]:
            await send_version(update, text, context=context, combination=combination)
        if text == "POM":
            user_data['pending_pom'] = {
                'product': product,
                'combination': combination
            }
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ—Ä—Å–∏–π:",
                reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ—à–µ–¥—à–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–æ–≤–µ–π—à–∏–µ"]], resize_keyboard=True)
            )
            return CHOOSE_VERSION_TYPE




async def send_version(update: Update, product_key: str, context: ContextTypes.DEFAULT_TYPE, combination: str = None) -> None:
    if not combination:
        combination = product_key
    logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combination}")

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
    safe_combination = combination.replace(".", r"\.").replace("-", r"\-")

    if product_key == "–≤–µ—Ä—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        message = rf"*–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:* {safe_combination}\n–í–µ—Ä—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏\."
        await update.message.reply_text(message, reply_markup=build_main_menu(update.effective_user.id), parse_mode="MarkdownV2")
        return

    try:
        parsed = parse_index(URL)
        if product_key in parsed:
            latest = parsed[product_key][-1]
            now = (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è Markdown (–Ω–µ –¥–ª—è –∫–æ–¥–æ–≤–æ–≥–æ –±–ª–æ–∫–∞)
            distr_line = f'projectDistr="{product_key}-{latest}"'
            code_block = f"```\n{distr_line}\n```"

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º timestamp
            safe_timestamp = now.replace("-", r"\-").replace(":", r"\:")

            message = (
                rf"*–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:* {safe_combination}"
                f"{code_block}\n\n"
                rf"\(–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {safe_timestamp} –ø–æ –ú–°–ö\)"
            )
        else:
            safe_product_key = product_key.replace(".", r"\.").replace("-", r"\-")
            message = rf"*–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:* {safe_combination} –ü—Ä–æ–¥—É–∫—Ç {safe_product_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\."

        logging.info(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {message}")
        await update.message.reply_text(message, reply_markup=build_main_menu(update.effective_user.id), parse_mode="MarkdownV2")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        await update.message.reply_text(error_message.replace(".", r"\."), reply_markup=build_main_menu(update.effective_user.id),
                                        parse_mode="MarkdownV2")
    finally:
        context.user_data.clear()



async def send_pom_version(update: Update, product: str, combination: str, use_tested_versions: bool, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è POM –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
    if product not in POM_MODULES:
        message = f"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {combination}\n\n–°–±–æ—Ä–∫–∞ POM –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞."
        await update.message.reply_text(message, reply_markup=build_main_menu(update.effective_user.id))
        return

    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...")
    start_time = time.time()

    try:
        releases = load_releases() if use_tested_versions else []
        version_cache = {}

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ JSON
        def get_tested_version(module_name):
            module_entries = [r for r in releases if r['module'] == module_name]
            if not module_entries:
                return None
            return max(module_entries, key=lambda x: Version(x['version']))['version']

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        local_versions = []
        for module in POM_MODULES[product]:
            base_name = module.replace("engdb.", "", 1)
            version = None

            if use_tested_versions:
                version = get_tested_version(base_name)
                if not version:
                    local_versions.append(f"<{module}.version>–í–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –ë–î</{module}.version>")
                    continue

            if not version:
                url = get_pom_url(module, build=False)
                version = parse_pom_version(url) if url else "URL –Ω–µ –∑–∞–¥–∞–Ω"

            local_versions.append(f"<{module}.version>{version}</{module}.version>")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–æ—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        build_config = POM_BUILD_MODULES.get(product, {})
        build_lines = ["<properties>", "    <!-- CORE VERSIONS -->"]

        # –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥—É–ª–µ–π
        def process_modules(module_list, section):
            nonlocal build_lines
            for module in module_list:
                if module == "engdb.help.branch":
                    build_lines.append("    <engdb.help.branch>INSERT NAME</engdb.help.branch>")
                    continue

                base_name = module.replace("engdb.", "", 1)
                version = None

                if use_tested_versions:
                    version = get_tested_version(base_name)
                    if not version:
                        build_lines.append(f"    <{module}.version>–í–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –ë–î</{module}.version>")
                        continue

                if not version:
                    url = get_pom_url(module, build=True)
                    version = parse_pom_version(url) if url else "URL –Ω–µ –∑–∞–¥–∞–Ω"

                build_lines.append(f"    <{module}.version>{version}</{module}.version>")

        process_modules(build_config.get("CORE", []), "CORE")
        build_lines.append("    <!-- MODULES VERSIONS -->")
        process_modules(build_config.get("MODULES", []), "MODULES")
        build_lines.append("</properties>")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elapsed = time.time() - start_time
        now = (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')

        safe_combination = combination.replace(".", r"\.").replace("-", r"\-")
        safe_elapsed = f"{elapsed:.2f}".replace(".", r"\.")
        safe_now = now.replace("-", r"\-").replace(":", r"\:")

        message = (
                f"*–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:* {safe_combination}\n\n"
                f"*–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ pom:*\n```\n" + "\n".join(local_versions) + "\n```\n"
                                                                              f"_–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–Ω—è–ª–∞ {safe_elapsed} —Å–µ–∫—É–Ω–¥_\n"
                                                                              f"\\(–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {safe_now} –ø–æ –ú–°–ö\\)\n\n"
                                                                              f"*–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏:*\n```\n" + "\n".join(
            build_lines) + "\n```\n"
                           f"\\(–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {safe_now} –ø–æ –ú–°–ö\\)"
        )

        await update.message.reply_text(
            message,
            reply_markup=build_main_menu(update.effective_user.id),
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}".replace(".", r"\.")
        await update.message.reply_text(
            error_msg,
            reply_markup=build_main_menu(update.effective_user.id),
            parse_mode="MarkdownV2"
        )
    finally:
        context.user_data.clear()


def main() -> None:
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)],
            SELECT_MODULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_module)],
            INPUT_VERSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_version)],
            INPUT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_description),
                CommandHandler("skip", skip_description)
            ],
            CHOOSE_VERSION_TYPE: [
                MessageHandler(filters.Text(["–ü—Ä–æ—à–µ–¥—à–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–æ–≤–µ–π—à–∏–µ"]), handle_choice)
            ]
        },
        fallbacks=[CommandHandler("start", start)]
    )
    app.add_handler(MessageHandler(
        filters.Text(["–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"]),
        toggle_subscription
    ))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice))

    app.run_polling()

if __name__ == '__main__':
    main()