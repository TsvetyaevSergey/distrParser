import asyncio
import json
import os
import re
import requests
import logging
import time
from bs4 import BeautifulSoup
from packaging.version import Version
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, User
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

from config import (
    URL,
    TELEGRAM_TOKEN,
    PRODUCT_BUTTONS,
    POM_MODULES,
    POM_BUILD_MODULES,
    UNIFIED_POM_URLS,
    MODULES_LIST,
    RELEASES_JSON_PATH,
    SUBSCRIPTIONS_JSON_PATH,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOG_FILE_PATH = os.path.join(BASE_DIR, "bot.log")
logging.basicConfig(
    filename=LOG_FILE_PATH,
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    encoding="utf-8",
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    MAIN_MENU,
    ADD_RELEASE_MODULE,
    ADD_RELEASE_VERSION,
    ADD_RELEASE_DESCRIPTION,
    ADD_RELEASE_TYPE,  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    GET_PROJECT,
    GET_BUILD_TYPE,
    GET_VERSION_TYPE,
) = range(8)


def get_user_info(user: User) -> str:
    parts = []
    if user.username:
        parts.append(f"@{user.username}")
    if user.full_name.strip():
        parts.append(user.full_name)
    return " ".join(parts) if parts else f"id{user.id}"


def load_releases() -> list:
    try:
        with open(RELEASES_JSON_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def save_releases(data: list) -> None:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ (module, version_type) –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    unique_entries = {}
    for item in data:
        key = (item["module"], item["version_type"])
        unique_entries[key] = item
    with open(RELEASES_JSON_PATH, "w", encoding="utf-8") as f:
        json.dump(list(unique_entries.values()), f, ensure_ascii=False, indent=2)


def load_subscriptions() -> dict:
    try:
        with open(SUBSCRIPTIONS_JSON_PATH, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"users": []}


def save_subscriptions(data: dict) -> None:
    with open(SUBSCRIPTIONS_JSON_PATH, "w") as f:
        json.dump(data, f, indent=2)


def build_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    subs = load_subscriptions()
    sub_button = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if user_id in subs["users"] else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    return ReplyKeyboardMarkup(
        [["–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–∏–∑", "–ü–æ–ª—É—á–∏—Ç—å"], [sub_button]], resize_keyboard=True
    )


def build_keyboard(items: list, cols: int = 3) -> ReplyKeyboardMarkup:
    rows = [items[i: i + cols] for i in range(0, len(items), cols)]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_menu(update.effective_user.id)
    )
    return MAIN_MENU


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return await start(update, context)


# –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞
async def add_release_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = build_keyboard(MODULES_LIST)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=keyboard)
    return ADD_RELEASE_MODULE


async def add_release_module(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    module = update.message.text
    if module not in MODULES_LIST:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –º–æ–¥—É–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return ADD_RELEASE_MODULE

    context.user_data["module"] = module
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.Y.Z:\n‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–∏!",
        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
    )
    return ADD_RELEASE_VERSION


async def add_release_version(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    version = update.message.text.strip()
    if not re.match(r"^\d+(\.\d+){1,3}$", version):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ADD_RELEASE_VERSION

    context.user_data["version"] = version
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ /skip):",
        reply_markup=ReplyKeyboardMarkup([["/skip", "/cancel"]], resize_keyboard=True),
    )
    return ADD_RELEASE_DESCRIPTION


async def add_release_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["description"] = update.message.text
    keyboard = [["–î–æ–ø—É—â–µ–Ω –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", "–î–æ–ø—É—â–µ–Ω –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–ª–∏–∑–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ADD_RELEASE_TYPE


async def add_release_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    version_type = update.message.text
    if version_type not in ["–î–æ–ø—É—â–µ–Ω –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", "–î–æ–ø—É—â–µ–Ω –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"]:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return ADD_RELEASE_TYPE

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏
    normalized_type = version_type.split()[-1].lower()  # "—É—Å—Ç–∞–Ω–æ–≤–∫–µ" –∏–ª–∏ "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞
    releases = load_releases()
    existing = next(
        (item for item in releases
         if item["module"] == context.user_data["module"]
         and item["version_type"] == normalized_type),
        None
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    if existing:
        existing.update({
            "version": context.user_data["version"],
            "description": context.user_data.get("description", ""),
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "user": get_user_info(update.effective_user)
        })
    else:
        releases.append({
            "module": context.user_data["module"],
            "version": context.user_data["version"],
            "description": context.user_data.get("description", ""),
            "version_type": normalized_type,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "user": get_user_info(update.effective_user)
        })

    save_releases(releases)
    await notify_subscribers(context.bot, releases[-1])

    await update.message.reply_text(
        "‚úÖ –†–µ–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=build_main_menu(update.effective_user.id)
    )
    context.user_data.clear()
    return MAIN_MENU

async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["description"] = ""
    return await add_release_description(update, context)


async def notify_subscribers(bot, data: dict):
    version_type = "–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ" if data["version_type"] == "—É—Å—Ç–∞–Ω–æ–≤–∫–µ" else "–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
    message = (
        f"üöÄ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ {data['module']} v{data['version']} ({version_type})\n"
        f"üìÖ {data['timestamp']}\nüë§ {data['user']}\n"
    )
    if data["description"] != "/skip":
        message += f"üìù {data['description']}"

    subs = load_subscriptions()
    for user_id in subs["users"]:
        await bot.send_message(chat_id=user_id, text=message)


# –ë–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
async def get_version_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = build_keyboard(list(PRODUCT_BUTTONS.keys()))
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=keyboard)
    return GET_PROJECT


async def get_project(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    project = update.message.text
    if project not in PRODUCT_BUTTONS:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return GET_PROJECT

    context.user_data["project"] = project
    keyboard = build_keyboard(list(PRODUCT_BUTTONS[project].keys()))
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä–∫—É:", reply_markup=keyboard)
    return GET_BUILD_TYPE


async def get_build_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    build_type = update.message.text
    project = context.user_data["project"]

    if build_type not in PRODUCT_BUTTONS[project]:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å–±–æ—Ä–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return GET_BUILD_TYPE

    if build_type == "POM":
        # –í –¥–∏–∞–ª–æ–≥–µ –≤—ã–±–æ—Ä–∞ —Å–±–æ—Ä–∫–∏ (GET_BUILD_TYPE) –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
        keyboard = ReplyKeyboardMarkup(
            [["–î–æ–ø—É—â–µ–Ω–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", "–î–æ–ø—É—â–µ–Ω–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", "–ù–æ–≤–µ–π—à–∏–π —Ä–µ–ª–∏–∑"]],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ—Ä—Å–∏–π:", reply_markup=keyboard)
        return GET_VERSION_TYPE

    await send_version(update, context, build_type)
    return MAIN_MENU


async def get_version_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    version_type = update.message.text
    if version_type not in ["–î–æ–ø—É—â–µ–Ω–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", "–î–æ–ø—É—â–µ–Ω–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", "–ù–æ–≤–µ–π—à–∏–π —Ä–µ–ª–∏–∑"]:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return GET_VERSION_TYPE

    await send_pom_version(update, context, version_type)
    return MAIN_MENU


def parse_index(url: str) -> dict[str, list[Version]]:
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    versions = {}
    for link in soup.select("ul li a[href$='.tar.gz']"):
        href = link.get('href')
        match = re.match(r"^(.+)-(\d+(?:\.\d+)*)\.tar\.gz$", href)
        if match:
            name, ver = match.groups()
            versions.setdefault(name, []).append(Version(ver))
    return {name: sorted(vs) for name, vs in versions.items()}


def parse_pom_version(url: str) -> str:
    xml_url = url.replace("#/", "").rstrip("/") + "/maven-metadata.xml"
    try:
        response = requests.get(xml_url)
        soup = BeautifulSoup(response.text, "lxml-xml")
        return soup.find("release").text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ POM: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"


async def send_version(update: Update, context: ContextTypes.DEFAULT_TYPE, build_type: str):
    project = context.user_data["project"]
    combination = f"{project} {build_type}"

    try:
        parsed = parse_index(URL)
        product = PRODUCT_BUTTONS[project][build_type]

        if product in parsed:
            latest = parsed[product][-1]
            timestamp = (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            safe_combination = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', combination)
            safe_product = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', product)
            safe_latest = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', str(latest))
            safe_timestamp = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', timestamp)

            message = (
                rf"*–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:* {safe_combination}"
                rf"```\nprojectDistr=\"{safe_product}-{safe_latest}\"```"
                rf"\(–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {safe_timestamp} –ø–æ –ú–°–ö\)"
            )
        else:
            safe_combination = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', combination)
            message = rf"*–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:* {safe_combination}\n–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        await update.message.reply_text(
            message,
            reply_markup=build_main_menu(update.effective_user.id),
            parse_mode="MarkdownV2"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        context.user_data.clear()

def get_pom_url(module: str, build: bool = False) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –º–æ–¥—É–ª—è.
    –°—Å—ã–ª–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ —Å–±–æ—Ä–æ—á–Ω–æ–≥–æ pom –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ.
    –ï—Å–ª–∏ build=True –∏ –∏–º—è –º–æ–¥—É–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "engdb.", —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ URL.
    """
    if build:
        if module.startswith("engdb."):
            base = module[len("engdb."):]
            return UNIFIED_POM_URLS.get(base)
        else:
            return UNIFIED_POM_URLS.get(module)
    else:
        return UNIFIED_POM_URLS.get(module)

async def send_pom_version(update: Update, context: ContextTypes.DEFAULT_TYPE, version_type: str):
    project = context.user_data["project"]
    combination = f"{project} POM"
    use_tested_versions = version_type in ["–î–æ–ø—É—â–µ–Ω–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", "–î–æ–ø—É—â–µ–Ω–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"]
    is_latest = version_type == "–ù–æ–≤–µ–π—à–∏–π —Ä–µ–ª–∏–∑"

    def escape_md(text: str) -> str:
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...")
    start_time = time.time()

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        version_filter = None
        if version_type == "–î–æ–ø—É—â–µ–Ω–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ":
            version_filter = "—É—Å—Ç–∞–Ω–æ–≤–∫–µ"
        elif version_type == "–î–æ–ø—É—â–µ–Ω–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é":
            version_filter = "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ª–∏–∑–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        releases = []
        if use_tested_versions:
            all_releases = load_releases()
            releases = [r for r in all_releases if r.get("version_type") == version_filter]

        version_cache = {}

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
        def get_version(module_name: str) -> str:
            if use_tested_versions:
                module_entries = [r for r in releases if r['module'] == module_name]
                if module_entries:
                    return max(module_entries, key=lambda x: Version(x['version']))['version']
            return None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        local_versions = []
        for module in POM_MODULES[project]:
            base_name = module.replace("engdb.", "", 1)
            version = get_version(base_name)

            if not version and not use_tested_versions:
                # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–µ–π—à–∏—Ö –≤–µ—Ä—Å–∏–π
                url = get_pom_url(module, build=False)
                version = parse_pom_version(url) if url else "URL –Ω–µ –∑–∞–¥–∞–Ω"

            safe_module = escape_md(module)
            safe_version = escape_md(version) if version else "N/A"
            local_versions.append(f"<{safe_module}.version>{safe_version}</{safe_module}.version>")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–æ—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        build_config = POM_BUILD_MODULES.get(project, {})
        build_lines = ["<properties>", "    <!-- CORE VERSIONS -->"]

        def process_modules(module_list):
            for module in module_list:
                if module == "engdb.help.branch":
                    build_lines.append("    <engdb.help.branch>INSERT NAME</engdb.help.branch>")
                    continue

                base_name = module.replace("engdb.", "", 1)
                version = get_version(base_name)

                if not version and not use_tested_versions:
                    url = get_pom_url(module, build=True)
                    version = parse_pom_version(url) if url else "URL –Ω–µ –∑–∞–¥–∞–Ω"

                safe_module = escape_md(module)
                safe_version = escape_md(version) if version else "N/A"
                build_lines.append(f"    <{safe_module}.version>{safe_version}</{safe_module}.version>")

        process_modules(build_config.get("CORE", []))
        build_lines.append("    <!-- MODULES VERSIONS -->")
        process_modules(build_config.get("MODULES", []))
        build_lines.append("</properties>")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elapsed = time.time() - start_time
        now = (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')

        safe_combination = escape_md(combination)
        safe_elapsed = escape_md(f"{elapsed:.2f} —Å–µ–∫")
        safe_now = escape_md(now)

        message = (
            f"*–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:* {safe_combination}\n\n"
            f"*–¢–∏–ø –≤–µ—Ä—Å–∏–π:* {escape_md(version_type)}\n\n"
            f"*–õ–æ–∫–∞–ª—å–Ω—ã–π pom:*\n```\n" + "\n".join(local_versions) + "\n```\n"
            f"*–°–±–æ—Ä–∫–∞:*\n```\n" + "\n".join(build_lines) + "\n```\n"
            f"_–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {safe_elapsed}_\n"
            f"\\(–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {safe_now} –ø–æ –ú–°–ö\\)"
        )

        await update.message.reply_text(
            message,
            reply_markup=build_main_menu(update.effective_user.id),
            parse_mode="MarkdownV2"
        )
    except Exception as e:
        error_msg = escape_md(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text(error_msg)
    finally:
        context.user_data.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    subs = load_subscriptions()

    if user_id in subs["users"]:
        subs["users"].remove(user_id)
        text = "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å"
    else:
        subs["users"].append(user_id)
        text = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å"

    save_subscriptions(subs)
    await update.message.reply_text(text, reply_markup=build_main_menu(user_id))
    return MAIN_MENU


def main() -> None:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    add_release_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–∏–∑"]), add_release_start)],
        states={
            ADD_RELEASE_MODULE: [MessageHandler(filters.TEXT, add_release_module)],
            ADD_RELEASE_VERSION: [MessageHandler(filters.TEXT, add_release_version)],
            ADD_RELEASE_DESCRIPTION: [
                MessageHandler(filters.TEXT, add_release_description),
                CommandHandler("skip", skip_description)
            ],
            ADD_RELEASE_TYPE: [MessageHandler(filters.TEXT, add_release_type)]  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        map_to_parent={MAIN_MENU: MAIN_MENU},
    )

    get_version_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["–ü–æ–ª—É—á–∏—Ç—å"]), get_version_start)],
        states={
            GET_PROJECT: [MessageHandler(filters.TEXT, get_project)],
            GET_BUILD_TYPE: [MessageHandler(filters.TEXT, get_build_type)],
            GET_VERSION_TYPE: [MessageHandler(filters.TEXT, get_version_type)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        map_to_parent={MAIN_MENU: MAIN_MENU},
    )

    main_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                add_release_conv,
                get_version_conv,
                MessageHandler(filters.Text(["–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"]), handle_subscription),
            ]
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(main_handler)
    application.run_polling()


if __name__ == "__main__":
    main()